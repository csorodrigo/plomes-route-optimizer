#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * Script para configurar credenciais Supabase
 *
 * Instru√ß√µes para obter as credenciais:
 * 1. Acesse https://supabase.com/dashboard
 * 2. Selecione seu projeto
 * 3. V√° em Settings > API
 * 4. Copie: URL do projeto, anon/public key, e service_role key
 */

console.log('üîß CONFIGURA√á√ÉO SUPABASE');
console.log('========================\n');

console.log('‚ùó INFORMA√á√ïES NECESS√ÅRIAS:');
console.log('');
console.log('Para configurar o Supabase, voc√™ precisa das seguintes informa√ß√µes:');
console.log('');
console.log('1. üìç URL do Projeto (formato: https://xxxxx.supabase.co)');
console.log('2. üîë Anon/Public Key (chave longa come√ßando com "eyJ...")');
console.log('3. üîê Service Role Key (chave longa come√ßando com "eyJ...")');
console.log('');
console.log('üåê Como obter essas informa√ß√µes:');
console.log('');
console.log('1. Acesse: https://supabase.com/dashboard');
console.log('2. Selecione seu projeto');
console.log('3. V√° em: Settings ‚Üí API');
console.log('4. Copie as informa√ß√µes da se√ß√£o "Project API keys"');
console.log('');

// Verificar configura√ß√£o atual
const envPath = path.join(__dirname, '..', '.env');
console.log('üìã CONFIGURA√á√ÉO ATUAL (.env):');

try {
    const envContent = fs.readFileSync(envPath, 'utf8');

    const supabaseUrl = envContent.match(/SUPABASE_URL=(.+)/)?.[1] || 'N√ÉO CONFIGURADO';
    const supabaseAnonKey = envContent.match(/SUPABASE_ANON_KEY=(.+)/)?.[1] || 'N√ÉO CONFIGURADO';
    const supabaseServiceKey = envContent.match(/SUPABASE_SERVICE_ROLE_KEY=(.+)/)?.[1] || 'N√ÉO CONFIGURADO';

    console.log(`URL: ${supabaseUrl}`);
    console.log(`Anon Key: ${supabaseAnonKey.substring(0, 20)}...`);
    console.log(`Service Key: ${supabaseServiceKey.substring(0, 20)}...`);
    console.log('');

    // Validar formato
    let hasErrors = false;

    if (!supabaseUrl.includes('supabase.co')) {
        console.log('‚ùå URL parece inv√°lida (deve terminar com .supabase.co)');
        hasErrors = true;
    }

    if (!supabaseAnonKey.startsWith('eyJ')) {
        console.log('‚ùå Anon Key parece inv√°lida (deve come√ßar com "eyJ")');
        hasErrors = true;
    }

    if (!supabaseServiceKey.startsWith('eyJ')) {
        console.log('‚ùå Service Key parece inv√°lida (deve come√ßar com "eyJ")');
        hasErrors = true;
    }

    if (supabaseAnonKey.length < 100) {
        console.log('‚ùå Anon Key muito curta (deve ter mais de 100 caracteres)');
        hasErrors = true;
    }

    if (hasErrors) {
        console.log('');
        console.log('üö® PROBLEMAS DETECTADOS NA CONFIGURA√á√ÉO!');
        console.log('');
        console.log('üìù Para corrigir:');
        console.log('');
        console.log('1. Abra o arquivo .env');
        console.log('2. Substitua os valores SUPABASE_* pelos corretos');
        console.log('3. Execute novamente: node backend/test-supabase.js');
        console.log('');
        console.log('üí° EXEMPLO de configura√ß√£o correta:');
        console.log('');
        console.log('SUPABASE_URL=https://xxyyzz.supabase.co');
        console.log('SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzd...');
        console.log('SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzd...');
        console.log('');
    } else {
        console.log('‚úÖ Configura√ß√£o parece correta!');
        console.log('');
        console.log('üß™ Pr√≥ximo passo: Execute o teste');
        console.log('node backend/test-supabase.js');
    }

} catch (error) {
    console.error('‚ùå Erro ao ler arquivo .env:', error.message);
}

console.log('');
console.log('üîó Links √∫teis:');
console.log('');
console.log('‚Ä¢ Dashboard Supabase: https://supabase.com/dashboard');
console.log('‚Ä¢ Documenta√ß√£o API: https://supabase.com/docs/guides/api');
console.log('‚Ä¢ Guia de configura√ß√£o: https://supabase.com/docs/guides/getting-started');
console.log('');