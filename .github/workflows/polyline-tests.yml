name: Polyline Rendering Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend-v0/src/**'
      - 'backend/**'
      - '*.json'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend-v0/src/**'
      - 'backend/**'
      - '*.json'
      - '.github/workflows/**'

env:
  NODE_VERSION: '18'
  CI: true

jobs:
  unit-tests:
    name: Unit Tests - Polyline Logic
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install frontend-v0 dependencies
        run: |
          cd frontend-v0
          npm ci

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results.xml

  integration-tests:
    name: Integration Tests - Map Display
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install frontend-v0 dependencies
        run: |
          cd frontend-v0
          npm ci

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: coverage/

  e2e-tests:
    name: E2E Tests - Full Workflow
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      # Add a test database service if needed
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            chromium-browser \
            xvfb

      - name: Install root dependencies
        run: npm ci

      - name: Install frontend-v0 dependencies
        run: |
          cd frontend-v0
          npm ci

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          PORT=3001
          DATABASE_URL=sqlite::memory:
          JWT_SECRET=test-secret-key
          PLOOME_API_KEY=test-key
          GOOGLE_MAPS_API_KEY=test-key
          EOF

      - name: Setup test database
        run: |
          # Create test database with sample data
          node -e "
            const fs = require('fs');
            const path = require('path');
            const Database = require('better-sqlite3');

            const db = new Database(':memory:');

            // Create customers table with test data
            db.exec(\`
              CREATE TABLE customers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                latitude REAL,
                longitude REAL,
                street_address TEXT,
                city TEXT,
                cep TEXT
              );

              INSERT INTO customers (name, latitude, longitude, street_address, city, cep) VALUES
                ('Test Customer A', -23.5505, -46.6333, 'Rua A, 123', 'São Paulo', '01000-000'),
                ('Test Customer B', -23.5515, -46.6343, 'Rua B, 456', 'São Paulo', '01001-000'),
                ('Test Customer C', -23.5525, -46.6353, 'Rua C, 789', 'São Paulo', '01002-000');
            \`);

            // Save to file for backend to use
            const data = db.prepare('SELECT * FROM customers').all();
            fs.writeFileSync('test-customers.json', JSON.stringify(data, null, 2));
            db.close();
          "

      - name: Run E2E tests
        run: |
          # Start virtual display for headless browser
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &

          # Run E2E tests
          npm run test:e2e
        env:
          NODE_ENV: test
          PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium-browser
          CI: true

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            screenshots/
            test-reports/
            coverage/

      - name: Upload screenshots on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-failure-screenshots
          path: screenshots/

  coverage-report:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend-v0 && npm ci

      - name: Generate coverage report
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: polyline-tests
          name: polyline-coverage
          fail_ci_if_error: false

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              const coverageSummary = JSON.parse(
                fs.readFileSync('./coverage/coverage-summary.json', 'utf8')
              );

              const total = coverageSummary.total;
              const comment = `
              ## 🧪 Polyline Test Coverage Report

              | Metric | Percentage | Covered/Total |
              |--------|------------|---------------|
              | Lines | ${total.lines.pct}% | ${total.lines.covered}/${total.lines.total} |
              | Functions | ${total.functions.pct}% | ${total.functions.covered}/${total.functions.total} |
              | Branches | ${total.branches.pct}% | ${total.branches.covered}/${total.branches.total} |
              | Statements | ${total.statements.pct}% | ${total.statements.covered}/${total.statements.total} |

              ${total.lines.pct >= 80 ? '✅' : '⚠️'} Overall coverage: **${total.lines.pct}%**

              ${total.lines.pct >= 80
                ? 'Great job! Coverage is above the 80% threshold.'
                : 'Coverage is below 80%. Consider adding more tests.'
              }
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not read coverage summary:', error.message);
            }

  quality-checks:
    name: Code Quality & Performance
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend-v0 && npm ci

      - name: Run ESLint on polyline-related files
        run: |
          npx eslint frontend-v0/src/components/RouteOptimizer.jsx \
                      frontend-v0/src/components/__tests__/RouteOptimizer*.test.js \
                      frontend-v0/src/__tests__/utils/polylineTestFactory.js \
                      --format=github
        continue-on-error: true

      - name: Check bundle size impact
        run: |
          cd frontend-v0
          npm run build

          # Get current bundle size
          CURRENT_SIZE=$(du -sb build/static/js/*.js | awk '{sum += $1} END {print sum}')
          echo "Current bundle size: $CURRENT_SIZE bytes"

          # Store in environment for later steps
          echo "BUNDLE_SIZE=$CURRENT_SIZE" >> $GITHUB_ENV

      - name: Performance benchmark
        run: |
          # Run a quick performance test
          node -e "
            const start = process.hrtime.bigint();

            // Simulate polyline coordinate processing
            const coordinates = Array.from({length: 1000}, (_, i) => [
              -23.5505 + (i * 0.001),
              -46.6333 + (i * 0.001)
            ]);

            // Simulate validation
            const valid = coordinates.filter(coord =>
              Array.isArray(coord) &&
              coord.length === 2 &&
              typeof coord[0] === 'number' &&
              typeof coord[1] === 'number'
            );

            const end = process.hrtime.bigint();
            const duration = Number(end - start) / 1_000_000; // Convert to ms

            console.log(\`Performance benchmark:\`);
            console.log(\`- Processed \${coordinates.length} coordinates\`);
            console.log(\`- Validation time: \${duration.toFixed(2)}ms\`);
            console.log(\`- Valid coordinates: \${valid.length}\`);

            if (duration > 100) {
              console.error('⚠️ Performance degradation detected!');
              process.exit(1);
            } else {
              console.log('✅ Performance within acceptable limits');
            }
          "

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, quality-checks]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend-v0 && npm ci

      - name: Build production bundle
        run: |
          cd frontend-v0
          npm run build
        env:
          NODE_ENV: production

      - name: Verify polyline functionality in production build
        run: |
          # Quick verification that polyline imports are working
          node -e "
            const fs = require('fs');
            const path = require('path');

            // Check if RouteOptimizer component exists in build
            const buildDir = './frontend-v0/build/static/js/';
            const jsFiles = fs.readdirSync(buildDir).filter(f => f.endsWith('.js'));

            let polylineFound = false;
            for (const file of jsFiles) {
              const content = fs.readFileSync(path.join(buildDir, file), 'utf8');
              if (content.includes('polyline') || content.includes('Polyline')) {
                polylineFound = true;
                break;
              }
            }

            if (!polylineFound) {
              console.error('❌ Polyline functionality not found in production build!');
              process.exit(1);
            } else {
              console.log('✅ Polyline functionality verified in production build');
            }
          "

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Readiness Summary" >> $GITHUB_STEP_SUMMARY
          echo "All polyline rendering tests have passed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Unit tests for polyline rendering logic" >> $GITHUB_STEP_SUMMARY
          echo "- Integration tests for map display" >> $GITHUB_STEP_SUMMARY
          echo "- E2E tests for complete user workflow" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality and performance checks" >> $GITHUB_STEP_SUMMARY
          echo "- Production build verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Key Features Verified" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Red polyline rendering (color: #FF0000, weight: 6, opacity: 1.0)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Real route data priority over waypoint fallback" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Comprehensive logging and debug information" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Error handling for invalid coordinates" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Development debug panel functionality" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The polyline rendering functionality is ready for deployment! 🎉" >> $GITHUB_STEP_SUMMARY